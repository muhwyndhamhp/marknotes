// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.590
package new

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "github.com/muhwyndhamhp/marknotes/pub/variables"
import "github.com/muhwyndhamhp/marknotes/pub/pages/dashboards"
import "github.com/muhwyndhamhp/marknotes/pkg/models"
import "strings"
import "fmt"
import "github.com/muhwyndhamhp/marknotes/utils/tern"
import "github.com/muhwyndhamhp/marknotes/pub/assets"

type NewVM struct {
	Opts      pub_variables.DashboardOpts
	UploadURL string
	BaseURL   string
	Post      *models.Post
}

func New(vm NewVM) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = pub_dashboard.Dashboard(pub_variables.DashboardOpts{
			Nav:               vm.Opts.Nav,
			AdditionalHeaders: vm.Opts.AdditionalHeaders,
			BreadCrumbs:       vm.Opts.BreadCrumbs,
			Comp:              new(vm.Post, vm.BaseURL, vm.UploadURL),
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func new(existingPost *models.Post, baseURL, uploadURL string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<form id=\"form-post\" class=\"mx-auto mt-6 flex h-full w-full flex-col max-w-screen-itn2 md:flex-row-reverse\"><div><div class=\"sticky top-20 box-border md:min-h-60\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if existingPost != nil {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" hx-get=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString("/dashboard/analytics/" + existingPost.Slug))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" hx-swap=\"afterbegin\" hx-trigger=\"load\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("><div class=\"box-border\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = submitButton(tern.Struct(existingPost, &models.Post{}).ID).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div></div><div class=\"flex w-full flex-col items-start overflow-x-clip md:ps-8\"><div class=\"w-full itn:max-w-2xl itn2:max-w-3xl md:max-w-xl xl:max-w-4xl\"><script src=\"/dist/web/routes/dashboard/articles/new/new.js\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 = []any{"w-[98%] mx-auto min-h-20 card bg-base-100/40 outline-dashed outline-secondary",
			templ.KV("outline-transparent", existingPost != nil && existingPost.HeaderImageURL != "")}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var3...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"header-image-base\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ.CSSClasses(templ_7745c5c3_Var3).String()))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" _=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(fmt.Sprintf(`
                  on dragover
                     halt the event
                     then remove .outline-secondary from me
                     then remove .text-primary from the first <h1/> in me
                  end

                  on dragleave
                     add .outline-secondary to me
                     then add .text-primary to the first <h1/> in me
                  end

                  on drop
                     remove .outline-secondary from me
                     then remove .text-primary from the first <h1/> in me
                     then call window.headerUpload(event, '%s')
                     js(it)
                        return JSON.parse(it).data.url
                     end
                     then set the @src of the first <img/> in me to it
                     then set the @value of #header_image_url to it
                     then set the @alt of #header_image_url to "Blogpost Header Image"
                     then remove .hidden from the first <div/> in me
                     then add .hidden to the first <h1/> in me
                     then add .outline-transparent to me
                     then Swal.close()
                  end
               `, uploadURL)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 = []any{"w-full h-full relative max-h-56",
			templ.KV(
				"hidden",
				existingPost == nil || existingPost.HeaderImageURL == "",
			)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var4...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ.CSSClasses(templ_7745c5c3_Var4).String()))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"><div class=\"absolute top-2 right-2 btn btn-circle btn-neutral\" _=\"\n            on click\n               halt the event\n               then set the @value of #header_image_url to &#39;&#39;\n               then add .hidden to the closest parent &lt;div/&gt;\n               then remove .hidden from the first &lt;h1/&gt; in #header-image-base\n               then remove .outline-transparent from #header-image-base\n            end\n            \">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = pub_assets.Close().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div><img class=\"h-full max-h-56 w-full object-cover\" src=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(HeaderURL(existingPost)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 = []any{"text-2xl font-bold text-center mx-auto my-auto text-primary",
			templ.KV(
				"hidden",
				existingPost != nil && existingPost.HeaderImageURL != "",
			)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var5...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<h1 class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ.CSSClasses(templ_7745c5c3_Var5).String()))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">Drop Header Image Here...</h1></div><textarea placeholder=\"Blog title goes here...\" class=\"text-2xl md:text-4xl textarea textarea-xs textarea-ghost font-extrabold\n             resize-y\n               align-middle\n               text-justify placeholder:text-2xl placeholder:font-normal border-transparent w-full p-6\n               mt-4 focus:outline-none min-h-1 bg-base-100 rounded-b-none rounded-t-box\" type=\"text\" name=\"title\" id=\"blog-title\" rows=\"2\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if existingPost != nil {
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(existingPost.Title)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/routes/dashboard/articles/new/new.templ`, Line: 127, Col: 26}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</textarea><div _=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(fmt.Sprintf(
			"on load or htmx:swap set window.content to %s then set window.baseURL to '%s' then trigger loadEditor",
			tern.Struct(existingPost, &models.Post{}).Content,
			baseURL,
		)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" class=\"w-full itn:max-w-2xl itn2:max-w-3xl rounded-t-none p-6 shadow-2xl min-h-96 bg-base-100 rounded-b-box md:max-w-xl xl:max-w-4xl\" hx-get=\"/dashboard/editor\" hx-trigger=\"loadEditor\" hx-swap=\"outerHTML\" hx-indicator=\"#global-progress\"></div><br><textarea class=\"hidden\" name=\"content\" type=\"text\" id=\"content\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if existingPost != nil {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(existingPost.EncodedContent)))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("></textarea> <input class=\"hidden\" name=\"header_image_url\" type=\"text\" id=\"header_image_url\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if existingPost != nil {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(existingPost.HeaderImageURL))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("> <input class=\"hidden\" name=\"tags\" type=\"text\" id=\"tags\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if existingPost != nil {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(TagsToCommaSeparated(existingPost.Tags)))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("> <input class=\"hidden\" name=\"status\" type=\"text\" id=\"status\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if existingPost != nil {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(existingPost.Status)))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("><br></div></div><br><div class=\"h-20\"></div></form>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func submitButton(existingID uint) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var7 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var7 == nil {
			templ_7745c5c3_Var7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"flex w-full flex-col items-center justify-evenly px-6 pb-6 sm:flex-row md:flex-col md:justify-center md:px-12\"><button id=\"publish-button\" class=\"mx-3 mt-3 btn btn-primary btn-block sm:btn-wide md:max-w-72 md:mx-0 md:mt-0 lg:max-w-64 xl:max-w-72\" hx-post=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(fmt.Sprintf("/dashboard/articles/push?status=published&existingID=%d", existingID)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if existingID != 0 {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" hx-target=\"#dashboard-content\" hx-swap=\"afterend\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" hx-target=\"#admin-root\" hx-swap=\"outerHTML\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" hx-vals=\"js:{\n        content_json: window.editor.getJSON(),\n        markdown_content: editor.storage.markdown.getMarkdown()\n        }\" hx-indicator=\"#global-progress\">Publish</button> <button id=\"draft-button\" class=\"mx-3 mt-3 btn btn-secondary btn-block sm:btn-wide md:max-w-72 md:mx-0 lg:max-w-64 xl:max-w-72\" hx-post=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(fmt.Sprintf("/dashboard/articles/push?status=draft&existingID=%d", existingID)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if existingID != 0 {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" hx-target=\"#dashboard-content\" hx-swap=\"afterend\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" hx-target=\"#admin-root\" hx-swap=\"outerHTML\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" hx-vals=\"js:{\n        content_json: window.editor.getJSON(),\n        markdown_content: editor.storage.markdown.getMarkdown()\n        }\" hx-indicator=\"#global-progress\">Save Draft</button></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func debugString(str string) string {
	fmt.Println(str)
	return str
}

func HeaderURL(existingPost *models.Post) string {
	if existingPost != nil {
		return existingPost.HeaderImageURL
	}
	return ""
}

func TagsToCommaSeparated(tags []*models.Tag) string {
	var tagNames []string
	for _, tag := range tags {
		tagNames = append(tagNames, tag.Title)
	}
	return strings.Join(tagNames, ",")
}

func uploadHeaderImage() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script type=\"text/javascript\">\n      window.headerUpload = async function(ev, url) {\n         ev.preventDefault()\n         if(ev.dataTransfer.files.length === 0) {\n            return\n         }\n\n         file = ev.dataTransfer.files[0]\n\n         Swal.showLoading()\n\n         const formData = new FormData()\n         formData.append(\"file\", file)\n\n         let res = fetch(url + \"?size=600\", {\n            method: \"POST\",\n            body: formData,\n            contentType: \"multipart/form-data\"\n         })\n         .then((response) => {return response.text()});\n         return res\n      }\n   </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
