package articles

import "github.com/muhwyndhamhp/marknotes/pub/variables"
import "github.com/muhwyndhamhp/marknotes/models"
import "github.com/muhwyndhamhp/marknotes/pub/assets"
import "github.com/muhwyndhamhp/marknotes/pub/pages/dashboards"
import "fmt"
import "github.com/muhwyndhamhp/marknotes/web/routes/dashboard/articles/_partials/page"
import "github.com/muhwyndhamhp/marknotes/web/routes/dashboard/articles/_partials/size"

type ArticlesVM struct {
	Opts       pub_variables.DashboardOpts
	Posts      []models.Post
	PageSizes  pub_variables.DropdownVM
	Pages      pub_variables.DropdownVM
	CreatePath string
}

templ Articles(vm ArticlesVM) {
	@pub_dashboard.Dashboard(pub_variables.DashboardOpts{
		Nav:         vm.Opts.Nav,
		BreadCrumbs: vm.Opts.BreadCrumbs,
		Comp:        articles(vm.Posts, vm.PageSizes, vm.Pages, vm.CreatePath),
	})
}

templ ArticleOOB(posts []models.Post, pageSizes, pages pub_variables.DropdownVM) {
	@articleTable(posts, getOOBAttr())
	@size.PageSize(pageSizes, getOOBAttr())
	@page.Pagination(pages, getOOBAttr())
}

func getOOBAttr() templ.Attributes {
	return templ.Attributes{"hx-swap-oob": "true"}
}

templ articles(posts []models.Post, pageSizes, pages pub_variables.DropdownVM, createPath string) {
	<div class="w-full h-full" id="articles">
		<div class="mx-3 md:mx-10">
			<div class="w-full flex flex-col md:flex-row justify-end">
				<h1 class="grow text-4xl text-secondary font-bold my-auto mt-3 md:mt-0">
					List of Articles
				</h1>
				@createArticleButton(createPath)
			</div>
			<br/>
			<div class="w-full flex flex-row mb-5 justify-end">
				@size.PageSize(pageSizes, templ.Attributes{})
				@page.Pagination(pages, templ.Attributes{})
			</div>
			@articleTable(posts, templ.Attributes{})
		</div>
		<br/>
		<div class="h-20"></div>
	</div>
}

templ createArticleButton(path string) {
	<button
		hx-get={ path }
		hx-target="#admin-root"
		hx-push-url="true"
		hx-indicator="#global-progress"
		class="btn btn-primary mt-5 md:mt-0 flex-initial"
	>
		Create
		<svg class="h-8 w-8 text-primary-content" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
			<path stroke="none" d="M0 0h24v24H0z"></path>
			<rect x="4" y="4" width="16" height="16" rx="2"></rect>
			<line x1="9" y1="12" x2="15" y2="12"></line>
			<line x1="12" y1="9" x2="12" y2="15"></line>
		</svg>
	</button>
}

templ articleTable(posts []models.Post, attrs templ.Attributes) {
	<div
		id="article-table"
		{ attrs... }
		class="card overflow-x-auto bg-base-100 overflow-y-hidden"
	>
		<table class="table">
			<!-- head -->
			<thead>
				<tr class="h-16">
					<th></th>
					<th>ID</th>
					<th>Title</th>
					<th>Created At</th>
					<th>Status</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody>
				for i := range posts {
					@articleRow(posts[i], i >= len(posts)-3)
				}
			</tbody>
		</table>
	</div>
}

templ articleRow(post models.Post, flipDropdown bool) {
	<tr class="h-16">
		<th></th>
		<th class="font-normal">{ fmt.Sprintf("%d", post.ID) }</th>
		<th>
			<a
				hx-boost="true"
				href={ templ.SafeURL(fmt.Sprintf("/dashboard/articles/%d/edit", post.ID)) }
				hx-indicator="#global-progress"
			>{ post.Title }</a>
		</th>
		<th class="font-normal">{ post.CreatedAt.Format("Jan, 02 2006 15:04:05") }</th>
		<th>
			<div
				class={
					"badge badge-outline badge-sm font-normal px-3 py-2",
					templ.KV("badge-primary text-primary-content", post.Status == "published"),
					templ.KV("badge-accent text-accent-content", post.Status == "draft"),
				}
			>{ string(post.Status) }</div>
		</th>
		<th>
			<div class={ "dropdown dropdown-end", templ.KV("dropdown-top", flipDropdown) }>
				<div tabindex="0" role="button" class="btn btn-ghost">
					@pub_assets.Setting(6)
				</div>
				<ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
					<li
						hx-indicator="#global-progress"
						hx-target="closest tr"
						hx-put={ fmt.Sprintf("/dashboard/articles/%d/delete", post.ID) }
					><span>Delete</span></li>
					if post.Status != "draft" {
						<li><a href={ templ.SafeURL(fmt.Sprintf("/dashboard/articles/%d/export/html", post.ID)) }>Export (HTML)</a></li>
						<li><a href={ templ.SafeURL(fmt.Sprintf("/dashboard/articles/%d/export/json", post.ID)) }>Export (JSON)</a></li>
						<li><a href={ templ.SafeURL(fmt.Sprintf("/dashboard/articles/%d/export/markdown", post.ID)) }>Export (Markdown)</a></li>
					}
				</ul>
			</div>
		</th>
	</tr>
}
