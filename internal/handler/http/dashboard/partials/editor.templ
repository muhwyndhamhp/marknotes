package partials

import "fmt"
import "github.com/muhwyndhamhp/marknotes/config"

templ Editor(uploadURL string) {
	if config.Get(config.ENV) != "dev" {
		<script src="https://resource.mwyndham.dev/dist/editor.js"></script>
	} else {
		<script src="/dist/editor.js"></script>
	}
	@uploadScript()
	<div
		id="code-editor"
		class="tiptap w-full min-h-96 bg-base-100 p-6 shadow-2xl rounded-t-none rounded-b-box"
	></div>
	@quickMenu()
	@altTextModal(uploadURL)
	@uploadModal()
	@linkModal()
}

templ quickMenu() {
	<div class="quick-menu">
		<ul class="menu menu-horizontal bg-base-200 rounded-box menu-md md:menu-xs">
			<li>
				<div _="on click upload_modal.showModal()" class="tooltip" data-tip="Upload Image">
					<svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 fill-base-content" viewBox="0 0 512 512">
						<!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
						<path d="M448 80c8.8 0 16 7.2 16 16V415.8l-5-6.5-136-176c-4.5-5.9-11.6-9.3-19-9.3s-14.4 3.4-19 9.3L202 340.7l-30.5-42.7C167 291.7 159.8 288 152 288s-15 3.7-19.5 10.1l-80 112L48 416.3l0-.3V96c0-8.8 7.2-16 16-16H448zM64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm80 192a48 48 0 1 0 0-96 48 48 0 1 0 0 96z"></path>
					</svg>
				</div>
			</li>
			<li>
				<div _="on click link_modal.showModal()" class="tooltip" data-tip="Add Linked Text">
					<svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 fill-base-content" viewBox="0 0 640 512">
						<!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
						<path d="M579.8 267.7c56.5-56.5 56.5-148 0-204.5c-50-50-128.8-56.5-186.3-15.4l-1.6 1.1c-14.4 10.3-17.7 30.3-7.4 44.6s30.3 17.7 44.6 7.4l1.6-1.1c32.1-22.9 76-19.3 103.8 8.6c31.5 31.5 31.5 82.5 0 114L422.3 334.8c-31.5 31.5-82.5 31.5-114 0c-27.9-27.9-31.5-71.8-8.6-103.8l1.1-1.6c10.3-14.4 6.9-34.4-7.4-44.6s-34.4-6.9-44.6 7.4l-1.1 1.6C206.5 251.2 213 330 263 380c56.5 56.5 148 56.5 204.5 0L579.8 267.7zM60.2 244.3c-56.5 56.5-56.5 148 0 204.5c50 50 128.8 56.5 186.3 15.4l1.6-1.1c14.4-10.3 17.7-30.3 7.4-44.6s-30.3-17.7-44.6-7.4l-1.6 1.1c-32.1 22.9-76 19.3-103.8-8.6C74 372 74 321 105.5 289.5L217.7 177.2c31.5-31.5 82.5-31.5 114 0c27.9 27.9 31.5 71.8 8.6 103.9l-1.1 1.6c-10.3 14.4-6.9 34.4 7.4 44.6s34.4 6.9 44.6-7.4l1.1-1.6C433.5 260.8 427 182 377 132c-56.5-56.5-148-56.5-204.5 0L60.2 244.3z"></path>
					</svg>
				</div>
			</li>
		</ul>
	</div>
}

templ linkModal() {
	<dialog id="link_modal" class="modal">
		<div class="modal-box flex flex-col">
			<h3 class="font-bold text-lg">Add a link</h3>
			<p class="py-4">
				Enter your link and the text you want to wrap it with.
			</p>
			<form method="dialog">
				<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
				<label class="input input-bordered flex items-center gap-2">
					Link
					<input id="form-input-link" type="text" class="grow bg-base-100" placeholder="https://mwyndham.dev"/>
				</label>
				<label class="input input-bordered flex items-center gap-2 mt-4">
					Text
					<input id="form-input-text" type="text" class="grow bg-base-100" placeholder="Clickable with link."/>
				</label>
				<div class="modal-action">
					<button
						class="btn"
						_="
            on click 
              get the (value of the first <input/> in the closest <form/>)
              then set link to it

              then get the (value of the previous <input/>)
              then set text to it
              then 
                js (text, link)
                  window.appendLinkedText(link, text)
                end
            end
            "
					>Submit</button>
				</div>
			</form>
		</div>
	</dialog>
}

templ uploadModal() {
	<dialog id="upload_modal" class="modal">
		<div class="modal-box w-full max-w-lg">
			<form method="dialog">
				<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
				<div
					id="header-image-base"
					class={ "w-full h-56 card bg-base-100/40 outline-dashed outline-secondary mt-6" }
					_={ `
                  on dragover
                     halt the event
                     then remove .outline-secondary from me
                     then remove .text-primary from the first <h1/> in me
                  end

                  on dragleave
                     add .outline-secondary to me
                     then add .text-primary to the first <h1/> in me
                  end

                  on drop 
                    halt the event
                    set window.uploadEvt to event.dataTransfer.files[0]
                    then document.getElementById("upload_modal").close()
                    then imageAltDialog.showModal()
                  end
               ` }
				>
					<h1 class="mx-auto my-auto text-xl text-primary brightness-50"><strong>Drop image here...</strong></h1>
				</div>
			</form>
		</div>
	</dialog>
}

templ altTextModal(uploadURL string) {
	<dialog id="imageAltDialog" class="modal">
		<div class="modal-box flex flex-col">
			<h3 class="font-bold text-lg">Almost There!</h3>
			<p class="py-4">
				It's important for us to provide accessibility information, so please do enter the alt text
				below to help screen reader.
			</p>
			<form method="dialog">
				<input type="text" placeholder="Type alt text here" class="input input-bordered w-full max-w-xs mt-4"/>
				<div class="modal-action">
					<button
						class="btn"
						_={ fmt.Sprintf(`
            on click call window.upload(window.uploadEvt, "%s")
            then
              js(it)
                url = JSON.parse(it).data.url
                editor.chain().focus().setImage({ 
                  src: url, 
                  alt: document.querySelector("#imageAltDialog input").value,
                  loading: "lazy",
                })
                .run()
                window.uploadEvt = null
                document.querySelector("#imageAltDialog input").value = ""
                Swal.close()
              end
            end`, 
            uploadURL,
            ) }
					>Submit</button>
				</div>
			</form>
		</div>
	</dialog>
}

templ uploadScript() {
	<script type="text/javascript">
      window.upload = async function(file, url) {
         Swal.showLoading()

         const formData = new FormData()
         formData.append("file", file)

         let res = fetch(url, {
            method: "POST",
            body: formData,
            contentType: "multipart/form-data"
         })
         .then((response) => {return response.text()});
         return res
      }
   </script>
}
