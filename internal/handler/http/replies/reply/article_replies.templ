package reply

import (
	"encoding/base64"
	"fmt"
	adorable "github.com/ipsn/go-adorable"
	"github.com/muhwyndhamhp/marknotes/internal"
	"github.com/muhwyndhamhp/marknotes/internal/handler/http/common/assets"
	"github.com/samber/lo"
	"strings"
)

templ ArticleReplies(articleID uint, replies []internal.Reply, value, errMessage string) {
	<div id="replies" class="md:max-w-3xl lg:max-w-4xl relative w-full md:mx-auto">
		<div class="flex flex-col ">
			@ReplyInput(articleID, value, errMessage)
			@Replies(articleID, replies)
		</div>
	</div>
}

templ ReplyInput(articleID uint, value, errMessage string) {
	<form class="flex flex-col px-4 md:px-0" id="reply-input">
		<fieldset class="fieldset">
			<legend class="fieldset-legend text-lg">Got some thoughts? Write it down below!</legend>
			<textarea
				_="on keyup remove .textarea-error from me then add .hidden to #err-label"
				class={
					"textarea w-full h-8 p-2 md:p-6 dark:md:p-4 text-sm md:text-lg",
					templ.KV("textarea-error", errMessage != ""),
				}
				placeholder="Can't believe you've eaten a capybara!! ðŸ˜±ðŸ˜±ðŸ˜±"
				name="replyBody"
			>{ value }</textarea>
			<div
				class={
					"label",
					templ.KV("hidden", errMessage == ""),
				}
				id="err-label"
			>{ errMessage }</div>
			<button
				class="btn btn-primary btn-md mt-3 w-56 ml-auto"
				hx-post={ fmt.Sprintf("/replies/articles/%d/create", articleID) }
				hx-target="#replies"
				hx-swap="outerHTML"
			>
				Submit!
			</button>
		</fieldset>
	</form>
}

templ Replies(articleId uint, replies []internal.Reply) {
	<ul class="menu bg-base-100 w-full py-2 px-4 rounded-field drop-shadow-2xl mt-4" id="root-scaffold">
		for _, rep := range rootReplies(replies) {
			<li>
				@NestReplies(articleId, rep, replies)
			</li>
		}
	</ul>
}

func rootReplies(replies []internal.Reply) []internal.Reply {
	return lo.Filter(replies, func(item internal.Reply, index int) bool { return item.ParentID == nil })
}

func NestReplies(articleId uint, parent internal.Reply, replies []internal.Reply) templ.Component {
	if len(parent.Replies) == 0 {
		return Reply(articleId, parent)
	}

	var child []templ.Component
	for _, reply := range parent.Replies {
		loadedReplies, ok := lo.Find(replies, func(item internal.Reply) bool {
			return item.ID == reply.ID
		})

		if !ok {
			continue
		}

		child = append(child, NestReplies(articleId, loadedReplies, replies))
	}

	return ReplyScaffold(Reply(articleId, parent), child)
}

templ ReplyScaffold(root templ.Component, childs []templ.Component) {
	<details open>
		@root
		<ul>
			for _, child := range childs {
				<li>
					@child
				</li>
			}
		</ul>
	</details>
}

templ Reply(articleId uint, reply internal.Reply) {
	<summary
		class={ "flex pe-6 border  hover:border-base-content my-2 w-full",
			templ.KV("bg-info/20 border-2 border-info", reply.Highlight),
			templ.KV("border-transparent",!reply.Highlight) }
	>
		if !reply.HidePublicity && (reply.ModerationStatus != internal.ModerationDangerous || !reply.EnableReply ) {
			<div class="flex flex-col flex-1 min-w-0">
				<div class="py-2 flex flex-row items-start w-full">
					<div class="avatar w-12 h-12">
						<div class="mask mask-squircle w-24">
							<img src={ fmt.Sprintf("data:image/png;base64,%s", base64.StdEncoding.EncodeToString(adorable.PseudoRandom([]byte(reply.Alias)))) }/>
						</div>
					</div>
					<div class="ms-3 me-2 flex flex-col flex-grow min-w-0">
						<p class="font-bold w-full text-xs md:text-md">{ reply.Alias }</p>
						<p class="mt-1 opacity-80 text-left leading-relaxed w-full break-all text-sm md:text flex-grow font-light">
							{ strings.ReplaceAll(reply.Message, "\\n", "<br>") }
						</p>
						if reply.EnableReply {
							<div class="flex flex-row">
								<button
									class="btn btn-xs btn-outline mr-auto mt-4 hover:btn-primary"
									_="on click halt the event then add .hidden to <form/> in the #root-scaffold then remove .hidden from <button/> in the #root-scaffold then remove .hidden from the next <form/> then add .hidden to me"
								>
									@assets.Reply(4)
									Reply
								</button>
							</div>
						}
						<form class="flex flex-col w-full hidden pt-6" id="reply-input">
							<div class="divider">Reply</div>
							<fieldset class="fieldset">
								<textarea
									_="on click halt the event"
									class="rounded-sm textarea w-full h-8 p-2 dark:p-4 text"
									placeholder="Please be kind ðŸ˜‰"
									name="replyBody"
								></textarea>
								<input
									type="text"
									placeholder="Type here"
									class="hidden"
									name="parentId"
									value={ fmt.Sprintf("%d", reply.ID) }
								/>
								<button
									class="btn btn-primary btn-md mt-3 w-56 ml-auto"
									hx-post={ fmt.Sprintf("/replies/articles/%d/create", articleId) }
									hx-target="#replies"
									hx-swap="outerHTML"
								>
									Submit!
								</button>
							</fieldset>
						</form>
					</div>
				</div>
			</div>
		} else if reply.ModerationStatus != internal.ModerationDangerous {
			<p class="italic w-full">Comment deleted by Admin</p>
		} else {
			<p class="italic w-full">Comment hidden by Auto Moderation</p>
		}
	</summary>
}
